//aritmeticki trougao

#include<iostream>

using namespace std; //zbirnizaa1,a1+d,...,a1+(n-1)d

long long zbirAritmetickogNiza(long long a1,long long d,long long n)
{
  return n*a1+d*(n-1)*n/2;
}

int main()
{
  long long k;
  cin>>k;
  long long a1=(k-1)*(k-1)+1;
  long long d=1;
  long long n=2*k-1;
  long long zbir Reda Trougla=zbirAritmetickogNiza(a1,d,n);
  cout<<zbirRedaTrougla<<endl;
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
//aritmeticki kvadrat

#include <iostream>

using namespace std;

int zbirVrste(int n, int i) {
    return i * n * n + (n - 1) * n / 2;
}
int zbirKolone(int n, int j) {
    return j * n + n * (n - 1) * n / 2;
}
int main()
{
    int n,i;
    cin >> n;
    cin >> i;
    cout << zbirVrste(n, i) << endl;
    cout << zbirKolone(n, i) << endl;

    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//nedostajuci broj

#include <iostream>

using namespace std;

int main()
{
  int n,a,x;
  long long ukupno;
  cin >> n;
  long long zbir = 0;
  for (int i = 0; i < n; i++)
  {
    cin >> x;
    zbir += x;
  }
  ukupno = ((long long)n) * (n+1) / 2;
  a = ukupno - zbir;
  cout << a << endl;
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Eratostenovo sito

void Eratosten(bool a[], int n) {
  a[0] = a[1] = false; // 0 i 1 po definiciji nisu prosti
  for (int i = 2; i * i <= n; i++)
    if (a[i]) { 
      for (int j = i * i; j <= n; j += i)
        a [j] = false; } 
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//zbir prostih u intervalu [a,b]

#include <iostream>
#include <vector>

using namespace std;

bool prostBr(int n)
{
  if (n == 1 ||(n % 2 == 0 && n != 2) ||(n % 3 == 0 && n != 3))
    return false;
  for (int k = 1; (6*k - 1) * (6*k - 1) <= n; k++)
    if (n % (6 * k + 1) == 0 || n % (6 * k - 1) == 0) return false;
      return true;
}

void Eratosten(vector<bool>& prost, int n)
{
  prost.resize(n + 1, true);
  prost[0] = prost[1] = false;
  for (int i = 2; i * i <= n; i++)
    if (prost[i])
    {
      for (int j = i * i; j <= n; j += i)
      prost[j] = false;
    }
}

int main()
{
  int a, b;
  cin>>a>>b;
  vector<bool> prost;
  vector<bool>::iterator it;
  Eratosten(prost, b);
  
  for (it=prost.begin();it!=prost.end();it++)
    if (*it)
      cout<<it-prost.begin()<<" ";
      
  cout<<endl;
  
  for (int i = a; i <= b; i++){
    if (prost[i]) 
      cout<<i<<" ";
  }
  
  int zbir = 0,broj=0;
  
  for (int i = a; i <= b; i++)
    if (prost[i])
    {
      broj++;
      zbir=zbir+i;
    }
    
cout << endl << broj <<" "<< zbir << endl;
return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//NZD I NZS

int nzd (int a,int b) {
    if (b==0) return a; 
    return nzd(b,a%b);
}

int nzs(int a, int b) {
    return (a * b) / nzd(a, b);
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//provera bar-kodova

#include <iostream>

using namespace std;

bool sadrzi(int a[], int n, int x)
{
  int l = 0, d = n - 1;
  while (l <= d)
  {
    int s = l + (d - l) / 2;
    if (x < a[s])
      d = s - 1;
    else{
        if (x > a[s])
          l = s + 1;
        else
          return true;
        }
  }
  return false;
}

const int MAX = 50000;

int main()
{
  int n;
  cin >> n;
  int a[MAX];
  for (int i = 0; i < n; i++)
    cin >> a[i];
  int broj = 0;
  int x;
  while (cin >> x)
  {
    if (sadrzi(a, n, x))
      broj++;
  }
  cout << broj << endl;
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//prelomna tacka

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int prviVeci(const vector<int>& a, int x)
{
  for (int i = 0; i < a.size(); i++)
    if (a[i] > x)
      return i;
  return a.size();
}

int poslednjiManji(const vector<int>& a, int x)
{
  for (int i = 0; i < a.size(); i++)
    if (a[i] >= x)
      return i-1;
  return a.size() - 1;
}

int main()
{
  int n;
  cin >> n;
  vector<int> v(n);
  for (int i = 0; i < n; i++)
    cin >> v[i];
  int pv = prviVeci(v, -1);
  int pm = poslednjiManji(v, 1);
  cout << pv << endl<< pm;
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//prvi koji nije deljiv

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int prviKojiNijeDeljiv(const vector<long long>& a, long long k)
{
  int n = a.size();
  int l = 0, d = n-1;
  while (l <= d)
  {
    int s = l + (d - l) / 2;
    if (a[s] % k != 0)
      d = s - 1;
    else
      l = s + 1;
  }
  return l;
}

int main()
{
  int n;
  cin >> n;
  vector<long long> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  long long k;
  while (cin >> k)
    cout << prviKojiNijeDeljiv(a, k) << '\n';
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//broj parova zbira s

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int main() {
     int s, n;
     cin >> s >> n;
     vector<int> a(n);
     for (int i = 0; i < n; i++)
         cin >> a[i];
     sort(begin(a), end(a));
     int brojParova = 0;
     for (int i = 0; i < s/2 + 1; i++)
        if (binary_search(next(begin(a), i + 1), end(a), s - a[i]))
         brojParova++;
    cout << brojParova << endl;
 return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//broj podstringova koji pocinju sa 1

#include <iostream>
#include <string>

using namespace std;

int main()
{
  string s;
  cin >> s;
  int brojJedinica = 0;
  for(char c : s){
    if(c == '1')
      brojJedinica++;
  }
  cout << brojJedinica * (brojJedinica - 1) / 2 << endl;
  return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//deljivi oko broja

#include <iostream>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;
    if(n % k == 0)
        cout << n << "\n" << n << "\n";
    else {
        int ispod = n - n % k;
        int iznad = ispod + k;
        cout << ispod << "\n" << iznad << "\n";
    }
    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//najmanji broj koji nije zbir elemenata skupa

#include <iostream>

using namespace std;

int main() {
  int n,x;
  cin >> n;
  int mozeDo = 0;
  for(int i=0;i<n;i++){
    cin >> x;
    if(x > mozeDo + 1)
      break;
    mozeDo += x;
   }
   cout << mozeDo + 1 << endl;
   return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

//serija sjajnih partija

#include <iostream>
#include <vector>

using namespace std;

int main(){
  int potrebnoPoena;
  cin >> potrebnoPoena;
  int potrebnaDuzinaSerije;
  cin >> potrebnaDuzinaSerije;
  int brojUtakmica;
  cin >> brojUtakmica;
  
  bool pronadjenaSerija = false;
  
  int duzinaTekuceSerije = 0;
  
  for(int i=0; i < brojUtakmica;i++){
    int brojPoena;
    cin >> brojPoena;
    if(brojPoena >= potrebnoPoena)
      duzinaTekuceSerije++;
    else{
        if(duzinaTekuceSerije >= potrebnaDuzinaSerije)
          pronadjenaSerija = true;
          duzinaTekuceSerije = 0;
        }
   }
   
   if(duzinaTekuceSerije >= potrebnaDuzinaSerije)
      pronadjenaSerija = true;
   cout << (pronadjenaSerija ? "da" : "ne" ) << endl;
   return 0;
}
